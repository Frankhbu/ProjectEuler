package me.hbu.frank.archives;

/**
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
 */
public class Problem002 {

	public static void main(String[] args) {
		int limit = 4000000;
		int start1 = 1;
		int start2 = 2;
		//0:all
		//1:odd 奇数
		//2:even 偶数
		int valueType = 2;
		int sum = getStartNumbersAndSumByValueTypeUnderLimit(start1,start2,valueType,limit);
		System.out.println(sum);
	}

	/**
	 * 根据斐波那契开头两个数字在limit下求指定类型数据的和
	 * @param start1
	 * @param start2
	 * @param valueType
	 * @param limit
	 * @return
	 */
	private static int getStartNumbersAndSumByValueTypeUnderLimit(int start1, int start2,
			int valueType, int limit) {
		int sum = 0;
		if (isRightType(valueType,start1)) {
			sum += start1;
		}
		if (isRightType(valueType, start2)) {
			sum += start2;
		}
		
		int current = start1 + start2;
		int pre = start2;
		while(current < limit){
			if (isRightType(valueType, current)) {
				sum += current;
			}
			current = pre + current;
			pre = current - pre;
		}
		return sum;
	}

	/**
	 * 判断num是否是指定数据类型valueType的数据
	 * @param start1
	 * @return
	 */
	private static boolean isRightType(int valueType,int num) {
		if (valueType == 0) {
			return true;
		}else if (valueType == 1) {
			if (num % 2 == 0) {
				return false;
			}else {
				return true;
			}
		}else if (valueType == 2) {
			if (num % 2 == 0) {
				return true;
			}else {
				return false;
			}
		}else {
			return false;
		}
	}

}
